"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Any, Optional
from wingspan import utils

class DeliveryMethodCollaboratorForm1099BalancesUpdateRequest(str, Enum):
    ELECTRONIC = 'Electronic'
    MAIL = 'Mail'
    BOTH = 'Both'
    LESS_THAN_NIL_GREATER_THAN_ = '<nil>'



@dataclasses.dataclass
class CollaboratorForm1099BalancesUpdateRequestEvents2:
    pass

class StatusCollaboratorForm1099BalancesUpdateRequest(str, Enum):
    READY = 'Ready'
    NEEDS_ACTION_INFO = 'NeedsActionInfo'
    NEEDS_ACTION_DISPUTE = 'NeedsActionDispute'
    SUBMITTED = 'Submitted'
    REJECTED = 'Rejected'
    ACCEPTED = 'Accepted'
    EXCLUDED = 'Excluded'
    LESS_THAN_NIL_GREATER_THAN_ = '<nil>'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class CollaboratorForm1099BalancesUpdateRequest:
    adjustments: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adjustments'), 'exclude': lambda f: f is None }})
    correction: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('correction'), 'exclude': lambda f: f is None }})
    delivery_method: Optional[DeliveryMethodCollaboratorForm1099BalancesUpdateRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryMethod'), 'exclude': lambda f: f is None }})
    dispute: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dispute'), 'exclude': lambda f: f is None }})
    events: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events'), 'exclude': lambda f: f is None }})
    status: Optional[StatusCollaboratorForm1099BalancesUpdateRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    

