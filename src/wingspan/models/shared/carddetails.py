"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .address import Address
from .c43d8e931fa2aa65f8160dad6cddeff3ae5f333e9b96d96dc85708e786c6a875 import C43d8e931fa2aa65f8160dad6cddeff3ae5f333e9b96d96dc85708e786c6a875
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Optional
from wingspan import utils

class StatusCardDetails(str, Enum):
    ACTIVE = 'Active'
    INACTIVE = 'Inactive'
    STOLEN = 'Stolen'
    LOST = 'Lost'
    FROZEN = 'Frozen'
    CLOSED_BY_CUSTOMER = 'ClosedByCustomer'
    SUSPECTED_FRAUD = 'SuspectedFraud'

class TypeCardDetails(str, Enum):
    INDIVIDUAL_DEBIT_CARD = 'individualDebitCard'
    BUSINESS_DEBIT_CARD = 'businessDebitCard'
    INDIVIDUAL_VIRTUAL_DEBIT_CARD = 'individualVirtualDebitCard'
    BUSINESS_VIRTUAL_DEBIT_CARD = 'businessVirtualDebitCard'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CardDetails:
    UNSET='__SPEAKEASY_UNSET__'
    address: Address = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    brand: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand') }})
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt') }})
    expiration_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationDate') }})
    internal: C43d8e931fa2aa65f8160dad6cddeff3ae5f333e9b96d96dc85708e786c6a875 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('internal') }})
    last4_digits: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last4Digits') }})
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    status: StatusCardDetails = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    type: TypeCardDetails = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    pin_set: Optional[bool] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pinSet'), 'exclude': lambda f: f is CardDetails.UNSET }})
    

