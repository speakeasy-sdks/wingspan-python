"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .sdkconfiguration import SDKConfiguration
from typing import Optional
from wingspan import utils
from wingspan._hooks import HookContext
from wingspan.models import errors, operations, shared

class BulkCalculation1099BatchItem:
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    
    def create(self, batch_id: str, bulk_calculation1099_item_create: Optional[shared.BulkCalculation1099ItemCreate] = None) -> operations.CreateBulkCalculation1099BatchItemResponse:
        r"""Create a bulk calculation1099 batch item"""
        hook_ctx = HookContext(operation_id='createBulkCalculation1099BatchItem', oauth2_scopes=[], security_source=None)
        request = operations.CreateBulkCalculation1099BatchItemRequest(
            batch_id=batch_id,
            bulk_calculation1099_item_create=bulk_calculation1099_item_create,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.CreateBulkCalculation1099BatchItemRequest, base_url, '/payments/bulk/calculation1099/batch/{batchId}/item', request)
        
        headers = {}
        
        req_content_type, data, form = utils.serialize_request_body(request, operations.CreateBulkCalculation1099BatchItemRequest, "bulk_calculation1099_item_create", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.CreateBulkCalculation1099BatchItemResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkCalculation1099Item])
                res.bulk_calculation1099_item = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get(self, batch_id: str, batch_item_id: str) -> operations.GetBulkCalculation1099BatchItemResponse:
        r"""Get a bulk calculation1099 batch item"""
        hook_ctx = HookContext(operation_id='getBulkCalculation1099BatchItem', oauth2_scopes=[], security_source=None)
        request = operations.GetBulkCalculation1099BatchItemRequest(
            batch_id=batch_id,
            batch_item_id=batch_item_id,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetBulkCalculation1099BatchItemRequest, base_url, '/payments/bulk/calculation1099/batch/{batchId}/item/{batchItemId}', request)
        
        headers = {}
        
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetBulkCalculation1099BatchItemResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkCalculation1099Item])
                res.bulk_calculation1099_item = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def update(self, batch_id: str, batch_item_id: str, bulk_calculation1099_item_update: Optional[shared.BulkCalculation1099ItemUpdate] = None) -> operations.UpdateBulkCalculation1099BatchItemResponse:
        r"""Update a bulk calculation1099 batch item"""
        hook_ctx = HookContext(operation_id='updateBulkCalculation1099BatchItem', oauth2_scopes=[], security_source=None)
        request = operations.UpdateBulkCalculation1099BatchItemRequest(
            batch_id=batch_id,
            batch_item_id=batch_item_id,
            bulk_calculation1099_item_update=bulk_calculation1099_item_update,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.UpdateBulkCalculation1099BatchItemRequest, base_url, '/payments/bulk/calculation1099/batch/{batchId}/item/{batchItemId}', request)
        
        headers = {}
        
        req_content_type, data, form = utils.serialize_request_body(request, operations.UpdateBulkCalculation1099BatchItemRequest, "bulk_calculation1099_item_update", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('PATCH', url, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.UpdateBulkCalculation1099BatchItemResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkPayableItem])
                res.bulk_payable_item = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    